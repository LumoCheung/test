<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	   http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!--声明型事务配置-->

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- 开启暴露Aop代理到ThreadLocal支持  -->
	<aop:aspectj-autoproxy expose-proxy="true"/>

	<!-- transactionTemplate事务封装 -->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<!--ISOLATION_DEFAULT 表示由使用的数据库决定  -->
		<property name="isolationLevelName" value="ISOLATION_DEFAULT"/>
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
		<!-- <property name="timeout" value="30"/> -->
	</bean>

	<!-- mybatis -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="true">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="classpath:transaction/mybatis-config.xml" />
    <property name="mapperLocations">
      <list>
        <value>classpath*:sqlMapper/*Mapper.xml</value>
      </list>
    </property>
  </bean>

  <!-- 配置Mybatis模版 -->
  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" lazy-init="true">
    <constructor-arg index="0" ref="sqlSessionFactory"/>
    <!-- 执行方式，SIMPLE, REUSE, BATCH
    <constructor-arg index="1" value="BATCH" />-->
  </bean>
  
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.paypalm.transaction.dao" />
    </bean>

  <!-- mybatis -->
  
  <!-- beans多环境配置只能放在全部bean之后，否则会报schema校验失败（找不到bean内容） -->
       
	<!-- dataSource -->
  <!-- 物理数据库配置 -->
  <beans profile="oracle">
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${oracle.url}" />
		<property name="username" value="${oracle.username}" />
		<property name="password" value="${oracle.password}" />
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:slf4j，防御sql注入的filter:wall -->
		<property name="filters" value="wall" />
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间	2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
		<property name="validationQuery" value="select 1 from dual" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
	</bean>
	</beans>
	
	  <beans profile="mysql">
	  	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="url" value="${mysql.url}" />
			<property name="username" value="${mysql.username}" />
			<property name="password" value="${mysql.password}" />
			<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:slf4j，防御sql注入的filter:wall -->
			<property name="filters" value="wall" />
			<!-- 最大连接池数量 -->
			<property name="maxActive" value="${maxActive}" />
			<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
			<property name="initialSize" value="${initialSize}" />
			<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
			<property name="maxWait" value="${maxWait}" />
			<!-- 最小连接池数量 -->
			<property name="minIdle" value="${minIdle}" />
			<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间	2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
			<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
			<!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。 -->
			<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
			<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
			<property name="validationQuery" value="select 1 from dual" />
			<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
			<property name="testWhileIdle" value="true" />
			<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
			<property name="testOnBorrow" value="false" />
			<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
			<property name="testOnReturn" value="false" />
			<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
		</bean>
	  </beans>
  <!-- dataSource -->

</beans>
